public class Main {
    private static int[][] state = new int[4][4]; //4x4 matrix for message characters (block)
    private static int[][] key = new int[4][4];

    public static void main(String[] args) {
        String message = "This is a very secret message!";  //plaintext -- in password program this would be a line of the file
        String keyMessage = "cryptologyclass!"; //key (length 16)
        String ciphertext = "";
        String plaintext = "";
//PADDING ALGORITHM FROM https://www.youtube.com/watch?v=4pmR49izUL0
        int originalLen = message.length();
        int paddedLen = originalLen;

        if(paddedLen % 16 != 0) { //length is not divisible by 16
            paddedLen = ((paddedLen /16)+1) * 16; //figures out what multiple of 16 uneven length should be
        }
        String paddedMessage = message;
        for(int i = 0; i < paddedLen; i++) {
            if(i>=originalLen) {
                paddedMessage += ":"; //pads end of message with ':' (password program doesn't use this key much)
            }
        }
        for(int i = 0; i < paddedLen; i+=16) {
            ciphertext += encrypt(paddedMessage.substring(i), keyMessage); //encrypts each 16 byte block (block cipher)
        }

        System.out.println("\nThe ciphertext is: " + ciphertext);

        for(int i = 0; i < ciphertext.length(); i+=32) { //i+=32 to account for 2-digit hex values going into state array
            plaintext += decrypt(ciphertext.substring(i),keyMessage);
        }

        System.out.println("\nThe plaintext is: " + plaintext);
    }

//Substitution Box Table for SubBytes() and SubWord() methods
    public static int[][] sbox = {{0x63, 0x7c, 0x77, 0x7b, 0xf2, 0x6b, 0x6f, 0xc5, 0x30, 0x01, 0x67, 0x2b, 0xfe, 0xd7, 0xab, 0x76},
            {0xca, 0x82, 0xc9, 0x7d, 0xfa, 0x59, 0x47, 0xf0, 0xad, 0xd4, 0xa2, 0xaf, 0x9c, 0xa4, 0x72, 0xc0},
            {0xb7, 0xfd, 0x93, 0x26, 0x36, 0x3f, 0xf7, 0xcc, 0x34, 0xa5, 0xe5, 0xf1, 0x71, 0xd8, 0x31, 0x15},
            {0x04, 0xc7, 0x23, 0xc3, 0x18, 0x96, 0x05, 0x9a, 0x07, 0x12, 0x80, 0xe2, 0xeb, 0x27, 0xb2, 0x75},
            {0x09, 0x83, 0x2c, 0x1a, 0x1b, 0x6e, 0x5a, 0xa0, 0x52, 0x3b, 0xd6, 0xb3, 0x29, 0xe3, 0x2f, 0x84},
            {0x53, 0xd1, 0x00, 0xed, 0x20, 0xfc, 0xb1, 0x5b, 0x6a, 0xcb, 0xbe, 0x39, 0x4a, 0x4c, 0x58, 0xcf},
            {0xd0, 0xef, 0xaa, 0xfb, 0x43, 0x4d, 0x33, 0x85, 0x45, 0xf9, 0x02, 0x7f, 0x50, 0x3c, 0x9f, 0xa8},
            {0x51, 0xa3, 0x40, 0x8f, 0x92, 0x9d, 0x38, 0xf5, 0xbc, 0xb6, 0xda, 0x21, 0x10, 0xff, 0xf3, 0xd2},
            {0xcd, 0x0c, 0x13, 0xec, 0x5f, 0x97, 0x44, 0x17, 0xc4, 0xa7, 0x7e, 0x3d, 0x64, 0x5d, 0x19, 0x73},
            {0x60, 0x81, 0x4f, 0xdc, 0x22, 0x2a, 0x90, 0x88, 0x46, 0xee, 0xb8, 0x14, 0xde, 0x5e, 0x0b, 0xdb},
            {0xe0, 0x32, 0x3a, 0x0a, 0x49, 0x06, 0x24, 0x5c, 0xc2, 0xd3, 0xac, 0x62, 0x91, 0x95, 0xe4, 0x79},
            {0xe7, 0xc8, 0x37, 0x6d, 0x8d, 0xd5, 0x4e, 0xa9, 0x6c, 0x56, 0xf4, 0xea, 0x65, 0x7a, 0xae, 0x08},
            {0xba, 0x78, 0x25, 0x2e, 0x1c, 0xa6, 0xb4, 0xc6, 0xe8, 0xdd, 0x74, 0x1f, 0x4b, 0xbd, 0x8b, 0x8a},
            {0x70, 0x3e, 0xb5, 0x66, 0x48, 0x03, 0xf6, 0x0e, 0x61, 0x35, 0x57, 0xb9, 0x86, 0xc1, 0x1d, 0x9e},
            {0xe1, 0xf8, 0x98, 0x11, 0x69, 0xd9, 0x8e, 0x94, 0x9b, 0x1e, 0x87, 0xe9, 0xce, 0x55, 0x28, 0xdf},
            {0x8c, 0xa1, 0x89, 0x0d, 0xbf, 0xe6, 0x42, 0x68, 0x41, 0x99, 0x2d, 0x0f, 0xb0, 0x54, 0xbb, 0x16}};
//Inverse Substitution Box Table for InvSubBytes() method
   public static int[][] sboxInv = {{0x52, 0x09, 0x6a, 0xd5, 0x30, 0x36, 0xa5, 0x38, 0xbf, 0x40, 0xa3, 0x9e, 0x81, 0xf3, 0xd7, 0xfb},
           {0x7c, 0xe3, 0x39, 0x82, 0x9b, 0x2f, 0xff, 0x87, 0x34, 0x8e, 0x43, 0x44, 0xc4, 0xde, 0xe9, 0xcb},
           {0x54, 0x7b, 0x94, 0x32, 0xa6, 0xc2, 0x23, 0x3d, 0xee, 0x4c, 0x95, 0x0b, 0x42, 0xfa, 0xc3, 0x4e},
           {0x08, 0x2e, 0xa1, 0x66, 0x28, 0xd9, 0x24, 0xb2, 0x76, 0x5b, 0xa2, 0x49, 0x6d, 0x8b, 0xd1, 0x25},
           {0x72, 0xf8, 0xf6, 0x64, 0x86, 0x68, 0x98, 0x16, 0xd4, 0xa4, 0x5c, 0xcc, 0x5d, 0x65, 0xb6, 0x92},
           {0x6c, 0x70, 0x48, 0x50, 0xfd, 0xed, 0xb9, 0xda, 0x5e, 0x15, 0x46, 0x57, 0xa7, 0x8d, 0x9d, 0x84},
           {0x90, 0xd8, 0xab, 0x00, 0x8c, 0xbc, 0xd3, 0x0a, 0xf7, 0xe4, 0x58, 0x05, 0xb8, 0xb3, 0x45, 0x06},
           {0xd0, 0x2c, 0x1e, 0x8f, 0xca, 0x3f, 0x0f, 0x02, 0xc1, 0xaf, 0xbd, 0x03, 0x01, 0x13, 0x8a, 0x6b},
           {0x3a, 0x91, 0x11, 0x41, 0x4f, 0x67, 0xdc, 0xea, 0x97, 0xf2, 0xcf, 0xce, 0xf0, 0xb4, 0xe6, 0x73},
           {0x96, 0xac, 0x74, 0x22, 0xe7, 0xad, 0x35, 0x85, 0xe2, 0xf9, 0x37, 0xe8, 0x1c, 0x75, 0xdf, 0x6e},
           {0x47, 0xf1, 0x1a, 0x71, 0x1d, 0x29, 0xc5, 0x89, 0x6f, 0xb7, 0x62, 0x0e, 0xaa, 0x18, 0xbe, 0x1b},
           {0xfc, 0x56, 0x3e, 0x4b, 0xc6, 0xd2, 0x79, 0x20, 0x9a, 0xdb, 0xc0, 0xfe, 0x78, 0xcd, 0x5a, 0xf4},
           {0x1f, 0xdd, 0xa8, 0x33, 0x88, 0x07, 0xc7, 0x31, 0xb1, 0x12, 0x10, 0x59, 0x27, 0x80, 0xec, 0x5f},
           {0x60, 0x51, 0x7f, 0xa9, 0x19, 0xb5, 0x4a, 0x0d, 0x2d, 0xe5, 0x7a, 0x9f, 0x93, 0xc9, 0x9c, 0xef},
           {0xa0, 0xe0, 0x3b, 0x4d, 0xae, 0x2a, 0xf5, 0xb0, 0xc8, 0xeb, 0xbb, 0x3c, 0x83, 0x53, 0x99, 0x61},
           {0x17, 0x2b, 0x04, 0x7e, 0xba, 0x77, 0xd6, 0x26, 0xe1, 0x69, 0x14, 0x63, 0x55, 0x21, 0x0c, 0x7d}};

   //MC Tables from https://crypto.stackexchange.com/questions/62603/aes-mixcolumns-predefined-lookup-2d-tables-and-rcon-predefined-lookup-2d-table
    //Start of MixedColumns() multiplicaion tables for Galois Field(2^8)
    public static int[][] mc2 = {{0x00, 0x02, 0x04, 0x06, 0x08, 0x0a, 0x0c, 0x0e, 0x10, 0x12, 0x14, 0x16, 0x18, 0x1a, 0x1c, 0x1e},
            {0x20, 0x22, 0x24, 0x26, 0x28, 0x2a, 0x2c, 0x2e, 0x30, 0x32, 0x34, 0x36, 0x38, 0x3a, 0x3c, 0x3e},
            {0x40, 0x42, 0x44, 0x46, 0x48, 0x4a, 0x4c, 0x4e, 0x50, 0x52, 0x54, 0x56, 0x58, 0x5a, 0x5c, 0x5e},
            {0x60, 0x62, 0x64, 0x66, 0x68, 0x6a, 0x6c, 0x6e, 0x70, 0x72, 0x74, 0x76, 0x78, 0x7a, 0x7c, 0x7e},
            {0x80, 0x82, 0x84, 0x86, 0x88, 0x8a, 0x8c, 0x8e, 0x90, 0x92, 0x94, 0x96, 0x98, 0x9a, 0x9c, 0x9e},
            {0xa0, 0xa2, 0xa4, 0xa6, 0xa8, 0xaa, 0xac, 0xae, 0xb0, 0xb2, 0xb4, 0xb6, 0xb8, 0xba, 0xbc, 0xbe},
            {0xc0, 0xc2, 0xc4, 0xc6, 0xc8, 0xca, 0xcc, 0xce, 0xd0, 0xd2, 0xd4, 0xd6, 0xd8, 0xda, 0xdc, 0xde},
            {0xe0, 0xe2, 0xe4, 0xe6, 0xe8, 0xea, 0xec, 0xee, 0xf0, 0xf2, 0xf4, 0xf6, 0xf8, 0xfa, 0xfc, 0xfe},
            {0x1b, 0x19, 0x1f, 0x1d, 0x13, 0x11, 0x17, 0x15, 0x0b, 0x09, 0x0f, 0x0d, 0x03, 0x01, 0x07, 0x05},
            {0x3b, 0x39, 0x3f, 0x3d, 0x33, 0x31, 0x37, 0x35, 0x2b, 0x29, 0x2f, 0x2d, 0x23, 0x21, 0x27, 0x25},
            {0x5b, 0x59, 0x5f, 0x5d, 0x53, 0x51, 0x57, 0x55, 0x4b, 0x49, 0x4f, 0x4d, 0x43, 0x41, 0x47, 0x45},
            {0x7b, 0x79, 0x7f, 0x7d, 0x73, 0x71, 0x77, 0x75, 0x6b, 0x69, 0x6f, 0x6d, 0x63, 0x61, 0x67, 0x65},
            {0x9b, 0x99, 0x9f, 0x9d, 0x93, 0x91, 0x97, 0x95, 0x8b, 0x89, 0x8f, 0x8d, 0x83, 0x81, 0x87, 0x85},
            {0xbb, 0xb9, 0xbf, 0xbd, 0xb3, 0xb1, 0xb7, 0xb5, 0xab, 0xa9, 0xaf, 0xad, 0xa3, 0xa1, 0xa7, 0xa5},
            {0xdb, 0xd9, 0xdf, 0xdd, 0xd3, 0xd1, 0xd7, 0xd5, 0xcb, 0xc9, 0xcf, 0xcd, 0xc3, 0xc1, 0xc7, 0xc5},
            {0xfb, 0xf9, 0xff, 0xfd, 0xf3, 0xf1, 0xf7, 0xf5, 0xeb, 0xe9, 0xef, 0xed, 0xe3, 0xe1, 0xe7, 0xe5}};

    public static int[][] mc3 = {{0x00, 0x03, 0x06, 0x05, 0x0c, 0x0f, 0x0a, 0x09, 0x18, 0x1b, 0x1e, 0x1d, 0x14, 0x17, 0x12, 0x11},
            {0x30, 0x33, 0x36, 0x35, 0x3c, 0x3f, 0x3a, 0x39, 0x28, 0x2b, 0x2e, 0x2d, 0x24, 0x27, 0x22, 0x21},
            {0x60, 0x63, 0x66, 0x65, 0x6c, 0x6f, 0x6a, 0x69, 0x78, 0x7b, 0x7e, 0x7d, 0x74, 0x77, 0x72, 0x71},
            {0x50, 0x53, 0x56, 0x55, 0x5c, 0x5f, 0x5a, 0x59, 0x48, 0x4b, 0x4e, 0x4d, 0x44, 0x47, 0x42, 0x41},
            {0xc0, 0xc3, 0xc6, 0xc5, 0xcc, 0xcf, 0xca, 0xc9, 0xd8, 0xdb, 0xde, 0xdd, 0xd4, 0xd7, 0xd2, 0xd1},
            {0xf0, 0xf3, 0xf6, 0xf5, 0xfc, 0xff, 0xfa, 0xf9, 0xe8, 0xeb, 0xee, 0xed, 0xe4, 0xe7, 0xe2, 0xe1},
            {0xa0, 0xa3, 0xa6, 0xa5, 0xac, 0xaf, 0xaa, 0xa9, 0xb8, 0xbb, 0xbe, 0xbd, 0xb4, 0xb7, 0xb2, 0xb1},
            {0x90, 0x93, 0x96, 0x95, 0x9c, 0x9f, 0x9a, 0x99, 0x88, 0x8b, 0x8e, 0x8d, 0x84, 0x87, 0x82, 0x81},
            {0x9b, 0x98, 0x9d, 0x9e, 0x97, 0x94, 0x91, 0x92, 0x83, 0x80, 0x85, 0x86, 0x8f, 0x8c, 0x89, 0x8a},
            {0xab, 0xa8, 0xad, 0xae, 0xa7, 0xa4, 0xa1, 0xa2, 0xb3, 0xb0, 0xb5, 0xb6, 0xbf, 0xbc, 0xb9, 0xba},
            {0xfb, 0xf8, 0xfd, 0xfe, 0xf7, 0xf4, 0xf1, 0xf2, 0xe3, 0xe0, 0xe5, 0xe6, 0xef, 0xec, 0xe9, 0xea},
            {0xcb, 0xc8, 0xcd, 0xce, 0xc7, 0xc4, 0xc1, 0xc2, 0xd3, 0xd0, 0xd5, 0xd6, 0xdf, 0xdc, 0xd9, 0xda},
            {0x5b, 0x58, 0x5d, 0x5e, 0x57, 0x54, 0x51, 0x52, 0x43, 0x40, 0x45, 0x46, 0x4f, 0x4c, 0x49, 0x4a},
            {0x6b, 0x68, 0x6d, 0x6e, 0x67, 0x64, 0x61, 0x62, 0x73, 0x70, 0x75, 0x76, 0x7f, 0x7c, 0x79, 0x7a},
            {0x3b, 0x38, 0x3d, 0x3e, 0x37, 0x34, 0x31, 0x32, 0x23, 0x20, 0x25, 0x26, 0x2f, 0x2c, 0x29, 0x2a},
            {0x0b, 0x08, 0x0d, 0x0e, 0x07, 0x04, 0x01, 0x02, 0x13, 0x10, 0x15, 0x16, 0x1f, 0x1c, 0x19, 0x1a}};

    //Start of InvMixedColumns() Multiplication Tables for Galois Field(2^8) -- 9, b, d, e
    public static int[][] mc9 = {{0x00,0x09,0x12,0x1b,0x24,0x2d,0x36,0x3f,0x48,0x41,0x5a,0x53,0x6c,0x65,0x7e,0x77},
            {0x90,0x99,0x82,0x8b,0xb4,0xbd,0xa6,0xaf,0xd8,0xd1,0xca,0xc3,0xfc,0xf5,0xee,0xe7},
            {0x3b,0x32,0x29,0x20,0x1f,0x16,0x0d,0x04,0x73,0x7a,0x61,0x68,0x57,0x5e,0x45,0x4c},
            {0xab,0xa2,0xb9,0xb0,0x8f,0x86,0x9d,0x94,0xe3,0xea,0xf1,0xf8,0xc7,0xce,0xd5,0xdc},
            {0x76,0x7f,0x64,0x6d,0x52,0x5b,0x40,0x49,0x3e,0x37,0x2c,0x25,0x1a,0x13,0x08,0x01},
            {0xe6,0xef,0xf4,0xfd,0xc2,0xcb,0xd0,0xd9,0xae,0xa7,0xbc,0xb5,0x8a,0x83,0x98,0x91},
            {0x4d,0x44,0x5f,0x56,0x69,0x60,0x7b,0x72,0x05,0x0c,0x17,0x1e,0x21,0x28,0x33,0x3a},
            {0xdd,0xd4,0xcf,0xc6,0xf9,0xf0,0xeb,0xe2,0x95,0x9c,0x87,0x8e,0xb1,0xb8,0xa3,0xaa},
            {0xec,0xe5,0xfe,0xf7,0xc8,0xc1,0xda,0xd3,0xa4,0xad,0xb6,0xbf,0x80,0x89,0x92,0x9b},
            {0x7c,0x75,0x6e,0x67,0x58,0x51,0x4a,0x43,0x34,0x3d,0x26,0x2f,0x10,0x19,0x02,0x0b},
            {0xd7,0xde,0xc5,0xcc,0xf3,0xfa,0xe1,0xe8,0x9f,0x96,0x8d,0x84,0xbb,0xb2,0xa9,0xa0},
            {0x47,0x4e,0x55,0x5c,0x63,0x6a,0x71,0x78,0x0f,0x06,0x1d,0x14,0x2b,0x22,0x39,0x30},
            {0x9a,0x93,0x88,0x81,0xbe,0xb7,0xac,0xa5,0xd2,0xdb,0xc0,0xc9,0xf6,0xff,0xe4,0xed},
            {0x0a,0x03,0x18,0x11,0x2e,0x27,0x3c,0x35,0x42,0x4b,0x50,0x59,0x66,0x6f,0x74,0x7d},
            {0xa1,0xa8,0xb3,0xba,0x85,0x8c,0x97,0x9e,0xe9,0xe0,0xfb,0xf2,0xcd,0xc4,0xdf,0xd6},
            {0x31,0x38,0x23,0x2a,0x15,0x1c,0x07,0x0e,0x79,0x70,0x6b,0x62,0x5d,0x54,0x4f,0x46}};
    public static int[][] mc11 = {{0x00,0x0b,0x16,0x1d,0x2c,0x27,0x3a,0x31,0x58,0x53,0x4e,0x45,0x74,0x7f,0x62,0x69},
            {0xb0,0xbb,0xa6,0xad,0x9c,0x97,0x8a,0x81,0xe8,0xe3,0xfe,0xf5,0xc4,0xcf,0xd2,0xd9},
            {0x7b,0x70,0x6d,0x66,0x57,0x5c,0x41,0x4a,0x23,0x28,0x35,0x3e,0x0f,0x04,0x19,0x12},
            {0xcb,0xc0,0xdd,0xd6,0xe7,0xec,0xf1,0xfa,0x93,0x98,0x85,0x8e,0xbf,0xb4,0xa9,0xa2},
            {0xf6,0xfd,0xe0,0xeb,0xda,0xd1,0xcc,0xc7,0xae,0xa5,0xb8,0xb3,0x82,0x89,0x94,0x9f},
            {0x46,0x4d,0x50,0x5b,0x6a,0x61,0x7c,0x77,0x1e,0x15,0x08,0x03,0x32,0x39,0x24,0x2f},
            {0x8d,0x86,0x9b,0x90,0xa1,0xaa,0xb7,0xbc,0xd5,0xde,0xc3,0xc8,0xf9,0xf2,0xef,0xe4},
            {0x3d,0x36,0x2b,0x20,0x11,0x1a,0x07,0x0c,0x65,0x6e,0x73,0x78,0x49,0x42,0x5f,0x54},
            {0xf7,0xfc,0xe1,0xea,0xdb,0xd0,0xcd,0xc6,0xaf,0xa4,0xb9,0xb2,0x83,0x88,0x95,0x9e},
            {0x47,0x4c,0x51,0x5a,0x6b,0x60,0x7d,0x76,0x1f,0x14,0x09,0x02,0x33,0x38,0x25,0x2e},
            {0x8c,0x87,0x9a,0x91,0xa0,0xab,0xb6,0xbd,0xd4,0xdf,0xc2,0xc9,0xf8,0xf3,0xee,0xe5},
            {0x3c,0x37,0x2a,0x21,0x10,0x1b,0x06,0x0d,0x64,0x6f,0x72,0x79,0x48,0x43,0x5e,0x55},
            {0x01,0x0a,0x17,0x1c,0x2d,0x26,0x3b,0x30,0x59,0x52,0x4f,0x44,0x75,0x7e,0x63,0x68},
            {0xb1,0xba,0xa7,0xac,0x9d,0x96,0x8b,0x80,0xe9,0xe2,0xff,0xf4,0xc5,0xce,0xd3,0xd8},
            {0x7a,0x71,0x6c,0x67,0x56,0x5d,0x40,0x4b,0x22,0x29,0x34,0x3f,0x0e,0x05,0x18,0x13},
            {0xca,0xc1,0xdc,0xd7,0xe6,0xed,0xf0,0xfb,0x92,0x99,0x84,0x8f,0xbe,0xb5,0xa8,0xa3}};
    public static int[][] mc13 = {{0x00,0x0d,0x1a,0x17,0x34,0x39,0x2e,0x23,0x68,0x65,0x72,0x7f,0x5c,0x51,0x46,0x4b},
            {0xd0,0xdd,0xca,0xc7,0xe4,0xe9,0xfe,0xf3,0xb8,0xb5,0xa2,0xaf,0x8c,0x81,0x96,0x9b},
            {0xbb,0xb6,0xa1,0xac,0x8f,0x82,0x95,0x98,0xd3,0xde,0xc9,0xc4,0xe7,0xea,0xfd,0xf0},
            {0x6b,0x66,0x71,0x7c,0x5f,0x52,0x45,0x48,0x03,0x0e,0x19,0x14,0x37,0x3a,0x2d,0x20},
            {0x6d,0x60,0x77,0x7a,0x59,0x54,0x43,0x4e,0x05,0x08,0x1f,0x12,0x31,0x3c,0x2b,0x26},
            {0xbd,0xb0,0xa7,0xaa,0x89,0x84,0x93,0x9e,0xd5,0xd8,0xcf,0xc2,0xe1,0xec,0xfb,0xf6},
            {0xd6,0xdb,0xcc,0xc1,0xe2,0xef,0xf8,0xf5,0xbe,0xb3,0xa4,0xa9,0x8a,0x87,0x90,0x9d},
            {0x06,0x0b,0x1c,0x11,0x32,0x3f,0x28,0x25,0x6e,0x63,0x74,0x79,0x5a,0x57,0x40,0x4d},
            {0xda,0xd7,0xc0,0xcd,0xee,0xe3,0xf4,0xf9,0xb2,0xbf,0xa8,0xa5,0x86,0x8b,0x9c,0x91},
            {0x0a,0x07,0x10,0x1d,0x3e,0x33,0x24,0x29,0x62,0x6f,0x78,0x75,0x56,0x5b,0x4c,0x41},
            {0x61,0x6c,0x7b,0x76,0x55,0x58,0x4f,0x42,0x09,0x04,0x13,0x1e,0x3d,0x30,0x27,0x2a},
            {0xb1,0xbc,0xab,0xa6,0x85,0x88,0x9f,0x92,0xd9,0xd4,0xc3,0xce,0xed,0xe0,0xf7,0xfa},
            {0xb7,0xba,0xad,0xa0,0x83,0x8e,0x99,0x94,0xdf,0xd2,0xc5,0xc8,0xeb,0xe6,0xf1,0xfc},
            {0x67,0x6a,0x7d,0x70,0x53,0x5e,0x49,0x44,0x0f,0x02,0x15,0x18,0x3b,0x36,0x21,0x2c},
            {0x0c,0x01,0x16,0x1b,0x38,0x35,0x22,0x2f,0x64,0x69,0x7e,0x73,0x50,0x5d,0x4a,0x47},
            {0xdc,0xd1,0xc6,0xcb,0xe8,0xe5,0xf2,0xff,0xb4,0xb9,0xae,0xa3,0x80,0x8d,0x9a,0x97}};
    public static int[][] mc14 = {{0x00,0x0e,0x1c,0x12,0x38,0x36,0x24,0x2a,0x70,0x7e,0x6c,0x62,0x48,0x46,0x54,0x5a},
            {0xe0,0xee,0xfc,0xf2,0xd8,0xd6,0xc4,0xca,0x90,0x9e,0x8c,0x82,0xa8,0xa6,0xb4,0xba},
            {0xdb,0xd5,0xc7,0xc9,0xe3,0xed,0xff,0xf1,0xab,0xa5,0xb7,0xb9,0x93,0x9d,0x8f,0x81},
            {0x3b,0x35,0x27,0x29,0x03,0x0d,0x1f,0x11,0x4b,0x45,0x57,0x59,0x73,0x7d,0x6f,0x61},
            {0xad,0xa3,0xb1,0xbf,0x95,0x9b,0x89,0x87,0xdd,0xd3,0xc1,0xcf,0xe5,0xeb,0xf9,0xf7},
            {0x4d,0x43,0x51,0x5f,0x75,0x7b,0x69,0x67,0x3d,0x33,0x21,0x2f,0x05,0x0b,0x19,0x17},
            {0x76,0x78,0x6a,0x64,0x4e,0x40,0x52,0x5c,0x06,0x08,0x1a,0x14,0x3e,0x30,0x22,0x2c},
            {0x96,0x98,0x8a,0x84,0xae,0xa0,0xb2,0xbc,0xe6,0xe8,0xfa,0xf4,0xde,0xd0,0xc2,0xcc},
            {0x41,0x4f,0x5d,0x53,0x79,0x77,0x65,0x6b,0x31,0x3f,0x2d,0x23,0x09,0x07,0x15,0x1b},
            {0xa1,0xaf,0xbd,0xb3,0x99,0x97,0x85,0x8b,0xd1,0xdf,0xcd,0xc3,0xe9,0xe7,0xf5,0xfb},
            {0x9a,0x94,0x86,0x88,0xa2,0xac,0xbe,0xb0,0xea,0xe4,0xf6,0xf8,0xd2,0xdc,0xce,0xc0},
            {0x7a,0x74,0x66,0x68,0x42,0x4c,0x5e,0x50,0x0a,0x04,0x16,0x18,0x32,0x3c,0x2e,0x20},
            {0xec,0xe2,0xf0,0xfe,0xd4,0xda,0xc8,0xc6,0x9c,0x92,0x80,0x8e,0xa4,0xaa,0xb8,0xb6},
            {0x0c,0x02,0x10,0x1e,0x34,0x3a,0x28,0x26,0x7c,0x72,0x60,0x6e,0x44,0x4a,0x58,0x56},
            {0x37,0x39,0x2b,0x25,0x0f,0x01,0x13,0x1d,0x47,0x49,0x5b,0x55,0x7f,0x71,0x63,0x6d},
            {0xd7,0xd9,0xcb,0xc5,0xef,0xe1,0xf3,0xfd,0xa7,0xa9,0xbb,0xb5,0x9f,0x91,0x83,0x8d}};




//rcon look-up table used in Key Expansion --> another calculation on Galois Field(2^8)
    public static int[] rcon = {0x8d, 0x01, 0x02, 0x04, 0x08, 0x10, 0x20, 0x40, 0x80, 0x1b, 0x36, 0x6c, 0xd8, 0xab, 0x4d, 0x9a,
            0x2f, 0x5e, 0xbc, 0x63, 0xc6, 0x97, 0x35, 0x6a, 0xd4, 0xb3, 0x7d, 0xfa, 0xef, 0xc5, 0x91, 0x39,
            0x72, 0xe4, 0xd3, 0xbd, 0x61, 0xc2, 0x9f, 0x25, 0x4a, 0x94, 0x33, 0x66, 0xcc, 0x83, 0x1d, 0x3a,
            0x74, 0xe8, 0xcb, 0x8d, 0x01, 0x02, 0x04, 0x08, 0x10, 0x20, 0x40, 0x80, 0x1b, 0x36, 0x6c, 0xd8,
            0xab, 0x4d, 0x9a, 0x2f, 0x5e, 0xbc, 0x63, 0xc6, 0x97, 0x35, 0x6a, 0xd4, 0xb3, 0x7d, 0xfa, 0xef,
            0xc5, 0x91, 0x39, 0x72, 0xe4, 0xd3, 0xbd, 0x61, 0xc2, 0x9f, 0x25, 0x4a, 0x94, 0x33, 0x66, 0xcc,
            0x83, 0x1d, 0x3a, 0x74, 0xe8, 0xcb, 0x8d, 0x01, 0x02, 0x04, 0x08, 0x10, 0x20, 0x40, 0x80, 0x1b,
            0x36, 0x6c, 0xd8, 0xab, 0x4d, 0x9a, 0x2f, 0x5e, 0xbc, 0x63, 0xc6, 0x97, 0x35, 0x6a, 0xd4, 0xb3,
            0x7d, 0xfa, 0xef, 0xc5, 0x91, 0x39, 0x72, 0xe4, 0xd3, 0xbd, 0x61, 0xc2, 0x9f, 0x25, 0x4a, 0x94,
            0x33, 0x66, 0xcc, 0x83, 0x1d, 0x3a, 0x74, 0xe8, 0xcb, 0x8d, 0x01, 0x02, 0x04, 0x08, 0x10, 0x20,
            0x40, 0x80, 0x1b, 0x36, 0x6c, 0xd8, 0xab, 0x4d, 0x9a, 0x2f, 0x5e, 0xbc, 0x63, 0xc6, 0x97, 0x35,
            0x6a, 0xd4, 0xb3, 0x7d, 0xfa, 0xef, 0xc5, 0x91, 0x39, 0x72, 0xe4, 0xd3, 0xbd, 0x61, 0xc2, 0x9f,
            0x25, 0x4a, 0x94, 0x33, 0x66, 0xcc, 0x83, 0x1d, 0x3a, 0x74, 0xe8, 0xcb, 0x8d, 0x01, 0x02, 0x04,
            0x08, 0x10, 0x20, 0x40, 0x80, 0x1b, 0x36, 0x6c, 0xd8, 0xab, 0x4d, 0x9a, 0x2f, 0x5e, 0xbc, 0x63,
            0xc6, 0x97, 0x35, 0x6a, 0xd4, 0xb3, 0x7d, 0xfa, 0xef, 0xc5, 0x91, 0x39, 0x72, 0xe4, 0xd3, 0xbd,
            0x61, 0xc2, 0x9f, 0x25, 0x4a, 0x94, 0x33, 0x66, 0xcc, 0x83, 0x1d, 0x3a, 0x74, 0xe8, 0xcb, 0x8d};

    public static String encrypt(String message, String keyString) {
        createStateBlock(message); //fill state array char-by-char with plaintext
        initializeKey(keyString); //fill key array char-by-char with inputted key

        int round = 9; //AES-128 has 9 rounds of the same thing...last round is different (10 round total)
        int[] expandedKey = new int[176]; //AES has a key expansion size of 176

        KeyExpansion(key,expandedKey); //perform key expansion (contains every key expansion used for round keys)
        AddRoundKeyInitial(state, key); //XOR initial state and key arrays

        for (int k = 0; k < round; k++) { //iterates through first 9 rounds
            //mixes array elements around
            SubBytes(state);
            ShiftRows(state);
            MixColumns(state);

            int[] expandedKeyResize = new int[16]; //next 16 byte expansion key used for AddRoundKey()
            int expandedKeyResizeCounter = 0; //used for filling array
            for(int i = 16*(k+1); i < (16*(k+1)) + 16; i++) { //Start at 16-byte chunk depending on what k is
                expandedKeyResize[expandedKeyResizeCounter] = expandedKey[i];
                expandedKeyResizeCounter++;
            }
            AddRoundKey(state, expandedKeyResize); //XOR state and new roundkey (kth expansion key generated by Rijndael Key Schedule)
        }
        int finalExpandedKeyCounter = 0;
        int[] finalExpandedKey = new int[16];
        for(int i = 160; i < 176; i++) { //grabs last 16-byte expansion key from expandedKey array
            finalExpandedKey[finalExpandedKeyCounter] = expandedKey[i];
            finalExpandedKeyCounter++;
        }
        //LAST ROUND --> EVERYTHING EXCEPT MIXEDCOLUMNS()
        SubBytes(state);
        ShiftRows(state);
        AddRoundKey(state, finalExpandedKey);

        String ciphertext = "";
        for(int r = 0; r < 4; r++) {
            for(int c = 0; c < 4; c++) {
                String hex = Integer.toHexString(state[c][r]); //convert state decimals to hex
                if(hex.length() == 1) {
                    ciphertext += "0" + hex; //"pads" hex values if only 1 char --> i.e '1' becomes '01'
                }
                else {
                    ciphertext += Integer.toHexString(state[c][r]); //if already 2 just concatenate
                }
            }
        }
        return ciphertext;
    }

    public static void createStateBlock(String message) {
        int letterIndex = 0; //keeps track of letters stored in array

        for (int column = 0; column < 4; column++) { //message gets stored by cycling through the rows of each column (backwards)
            for (int row = 0; row < 4; row++) {
                if (letterIndex >= message.length()) { //state block full?
                    break; //if full get out of the loop
                }
                int ASCII = (int) message.charAt(letterIndex); //converting letters/characters to ASCII for convenience
                state[row][column] = ASCII; //filling array in order specified earlier
                letterIndex++; //increment index of current letter
            }
        }
    }
    public static void createStateDecryptBlock(String ciphertext) { //used to grab every 2-digit hex character from ciphertext and fill state array
        int letterIndex = 0;
        for(int column = 0; column < 4; column++) {
            for(int row = 0; row < 4; row++) {
                if(letterIndex+2 >= ciphertext.length()) //avoids going out of bounds
                {
                    String singleHex = ciphertext.substring(letterIndex);
                    state[row][column] = Integer.parseInt(singleHex, 16);
                }
                else {
                    String singleHex = ciphertext.substring(letterIndex, letterIndex + 2);
                    state[row][column] = Integer.parseInt(singleHex, 16);
                }
                letterIndex += 2;
            }
        }
    }

    public static void initializeKey(String keyMessage) {
        int keyIndex = 0; //initialize key index

        for (int column = 0; column < 4; column++) { //fill key matrix up-down instead of left-right because ? that's what AES gods wanted
            for (int row = 0; row < 4; row++) {
                if (keyIndex >= keyMessage.length()) { //if keyIndex > length of message, break out of for loop to avoid OutOfBounds exceptions
                    break;
                }
                int ASCII = (int) keyMessage.charAt(keyIndex); //convert each char of key to ASCII
                key[row][column] = ASCII; //fill in order with ASCII key chars
                keyIndex++; //increment for each char
            }
        }
    }

    public static void SubBytes(int[][] state) { //subs values based on byte value -- nested for-loop use to traverse 2d array
        int rowInt = 0;
        int columnInt = 0;
        String rowTemp;
        String columnTemp;
        for (int row = 0; row < 4; row++) {         //i.e if state[0][0] = 53, then state[0][0] = sbox[5][3]
            for (int column = 0; column < 4; column++) {  //Nested for-loop to traverse 2-d array
                int temp = state[row][column]; //temp = int value bit
                if (temp <= 15) { //checks if the bit is 1 hex digit (i.e. <= 15)
                    columnInt = temp; //if only 1 hex digit -> it represents the column, while row = 0 --> i.e. 01 = sbox[0][1]
                    state[row][column] = sbox[0][columnInt]; //sub with proper sbox hex value (automatically converts to int, but will convert state/key to hex at end)
                } else {  // > 1 hex digit
                    String hex = Integer.toHexString(temp); //convert bit to hex
                    rowTemp = hex.substring(0, 1); //row value = 1st digit
                    columnTemp = hex.substring(hex.length() - 1); //column value = 2nd digit
                    rowInt = Integer.parseInt(rowTemp, 16); //convert to int to find sbox row
                    columnInt = Integer.parseInt(columnTemp, 16); //convert to int to find sbox column
                    state[row][column] = sbox[rowInt][columnInt]; //substitute using sbox
                }
            }
        }
    }

    public static void ShiftRows(int[][] state) {
        //create copy of state array so bits can be shifted properly
        int[][] temp = new int[4][4];
        for (int r = 0; r < 4; r++) {
            for (int c = 0; c < 4; c++) {
                temp[r][c] = state[r][c];
            }
        }
        //shifts 2nd row 1 unit leftwards
        state[1][0] = temp[1][1];
        state[1][1] = temp[1][2];
        state[1][2] = temp[1][3];
        state[1][3] = temp[1][0];
        //shifts 3rd row 2 units leftwards
        state[2][0] = temp[2][2];
        state[2][1] = temp[2][3];
        state[2][2] = temp[2][0];
        state[2][3] = temp[2][1];
        //shifts 4th row 3 units leftwards
        state[3][0] = temp[3][3];
        state[3][1] = temp[3][0];
        state[3][2] = temp[3][1];
        state[3][3] = temp[3][2];
    }

    public static void MixColumns(int[][] state) {
        int[][] temp = new int[4][4];
        int[][] mul2Array = new int[4][4]; //parallel array of mc2 table values for each element of state array
        int[][] mul3Array = new int[4][4]; //parallel array of mc3 values for each element of state array
        int columnInt = 0;
        String rowTemp, columnTemp; //row & column temp are for dividing hex values for mc table indices
        int rowInt = 0;

//**********FILL MUL2ARRAY FOR LATER REFERENCE**********
        for (int row = 0; row < 4; row++) {
            for (int column = 0; column < 4; column++) {  //Nested for-loop to traverse 2-d array
                int decimal = state[row][column]; //decimal = int value of bit
                if (decimal <= 15) { //checks if the bit is 1 hex digit (i.e. <= 15)
                    columnInt = decimal; //if only 1 hex digit -> it represents the column, while row = 0 --> i.e. 01 = mc#[0][1]
                    mul2Array[row][column] = mc2[0][columnInt]; //sub with proper mc# hex value
                } else {  // > 1 hex digit
                    String hex = Integer.toHexString(decimal); //convert bit to hex
                    rowTemp = hex.substring(0, 1); //row value = 1st digit
                    columnTemp = hex.substring(hex.length() - 1); //column value = 2nd digit
                    rowInt = Integer.parseInt(rowTemp, 16); //convert to int to find mc# row
                    columnInt = Integer.parseInt(columnTemp, 16); //convert to int to find mc# column
                    mul2Array[row][column] = mc2[rowInt][columnInt]; //substitute using mc#
                }
            }
        }
//**********FILL MUL3ARRAY FOR LATER REFERENCE**********
        for (int row = 0; row < 4; row++) {         //SAME PROCESS AS ABOVE
            for (int column = 0; column < 4; column++) {
                int decimal = state[row][column];
                if (decimal <= 15) {
                    columnInt = decimal;
                    mul3Array[row][column] = mc3[0][columnInt];
                } else {  // > 1 hex digit
                    String hex = Integer.toHexString(decimal); //convert bit to hex
                    rowTemp = hex.substring(0, 1); //row value = 1st digit
                    columnTemp = hex.substring(hex.length() - 1); //column value = 2nd digit
                    rowInt = Integer.parseInt(rowTemp, 16);
                    columnInt = Integer.parseInt(columnTemp, 16);
                    mul3Array[row][column] = mc3[rowInt][columnInt];
                }
            }
        }

        for (int column = 0; column < 4; column++) {
            for (int row = 0; row < 4; row++) {
                //Mixes columns based on pre-determined Galois Field calculations using mc tables and XOR
                if (row == 0) {
                    temp[row][column] = mul2Array[row][column] ^ mul3Array[row + 1][column] ^ state[row + 2][column] ^ state[row + 3][column];
                } else if (row == 1) {
                    temp[row][column] = state[0][column] ^ mul2Array[1][column] ^ mul3Array[2][column] ^ state[3][column];
                } else if (row == 2) {
                    temp[row][column] = state[0][column] ^ state[1][column] ^ mul2Array[2][column] ^ mul3Array[3][column];
                } else {
                    temp[row][column] = mul3Array[0][column] ^ state[1][column] ^ state[2][column] ^ mul2Array[3][column];
                }
            }
        }
        //copies temp array to state array
        for (int r = 0; r < 4; r++) {
            for (int c = 0; c < 4; c++) {
                state[r][c] = temp[r][c];
            }
        }
    }

    public static void RotWord(int[] word, int i) {
        int[] temp = new int[word.length];
        for(int a = 0; a < word.length; a++) {
            temp[a] = word[a]; //copies word array to temp array
        }
        //Shifts elements 1 unit leftwards
        word[0] = temp[1];
        word[1] = temp[2];
        word[2] = temp[3];
        word[3] = temp[0];
    }

    public static void SubWord(int[] word) {
        int rowInt = 0;
        int columnInt = 0;
        String rowTemp;
        String columnTemp;
        for (int row = 0; row < 4; row++) {         //i.e if state[0][0] = 53, then state[0][0] = sbox[5][3]
            int tempVal = word[row]; //temp = int value bit
            if (tempVal <= 15) { //checks if the bit is 1 hex digit (i.e. <= 15)
                columnInt = tempVal; //if only 1 hex digit -> it represents the column, while row = 0 --> i.e. 01 = sbox[0][1]
                word[row] = sbox[0][columnInt]; //sub with proper sbox hex value (automatically converts to int, but will convert state/key to hex at end)
            } else {  // > 1 hex digit
                String hex = Integer.toHexString(tempVal); //convert bit to hex
                rowTemp = hex.substring(0, 1); //row value = 1st digit
                columnTemp = hex.substring(hex.length() - 1); //column value = 2nd digit
                rowInt = Integer.parseInt(rowTemp, 16); //convert to int to find sbox row
                columnInt = Integer.parseInt(columnTemp, 16); //convert to int to find sbox column
                word[row] = sbox[rowInt][columnInt]; //substitute using sbox
            }
        }
    }

    public static void KeyExpansionMethods(int[] word, int iteration) { //KEY EXPANSION MANIPULATIONS
        //Shift word element leftwards 1 unit
        RotWord(word, iteration);
        //Substitution Box of word element values
        SubWord(word);
        //find rcon value of first word element and XOR it with word[0]
        word[0] ^= rcon[iteration];
    }

    public static void KeyExpansion(int[][] inputKey, int[] expandedKeys) { //KEY EXPANSION CODE FROM https://www.youtube.com/watch?v=4pmR49izUL0
        //First 16 bytes are original key
        int arrCounter = 0;
        for (int r = 0; r < 4; r++) {
            for (int c = 0; c < 4; c++) {
                expandedKeys[arrCounter] = inputKey[c][r];
                arrCounter++;
            }
        }

        int bytesGenerated = 16; //already filled first 16 bytes of expandedKeys array with original key
        int rconIteration = 1;
        int[] temp = new int[4]; //temp for word[] used in key expansion method

        while (bytesGenerated < 176) { //AES uses size 176 for key expansion
            //read 4 bytes
            for (int i = 0; i < 4; i++) {
                temp[i] = expandedKeys[i + bytesGenerated - 4];
            }
            //Do key expansion methods every 16 bytes
            if (bytesGenerated % 16 == 0) {
                KeyExpansionMethods(temp, rconIteration);
                rconIteration++;
            }
            //store result of XOR temp and [bytesGenerated - 16] into expandedKeys
            for (int a = 0; a < 4; a++) {
                expandedKeys[bytesGenerated] = expandedKeys[bytesGenerated - 16] ^ temp[a];
                bytesGenerated++;
            }
        }
    }

    public static void AddRoundKey(int[][]state, int[] roundKey) {
        int[][] temp = new int[4][4];
        int roundKeyCounter = 0;
        for(int c = 0; c < 4; c++) {
            for(int r = 0; r < 4; r++) {
                temp[r][c] = roundKey[roundKeyCounter]; //convert roundKey array to a matrix
                roundKeyCounter++;
            }
        }
       for (int i = 0; i < 4; i++) {
            for (int k = 0; k < 4; k++) {
                state[k][i] = state[k][i] ^ temp[k][i]; //XOR the state and roundKey
            }
        }
    }

    public static void AddRoundKeyInitial(int[][] state, int[][] roundKey) {
        //Same thing as AddRoundKey except initial key matrix is a parameter instead of roundKey[]
        for (int i = 0; i < 4; i++) {
            for (int k = 0; k < 4; k++) {
                state[k][i] = state[k][i] ^ roundKey[k][i]; //XOR the state and key
            }
        }
    }

//******START OF DECRYPTION METHODS******
    public static String decrypt(String ciphertext, String keyString) {
        createStateDecryptBlock(ciphertext);  //fill state array with
        initializeKey(keyString);  //fill key array

        int[] expandedKey = new int[176]; //create array for key expansion
        KeyExpansion(key, expandedKey);

        int finalExpandedKeyCounter = 0;
        int[] finalExpandedKey = new int[16];
        for(int i = 160; i < 176; i++) { //grabs last 16-byte expansion key from expandedKey array (same as final AddRoundKey() in encrypt func.)
            finalExpandedKey[finalExpandedKeyCounter] = expandedKey[i];
            finalExpandedKeyCounter++;
        }
        AddRoundKey(state,finalExpandedKey); //XOR state and last key expansion

        for(int k = 9; k > 0; k--) { //reverse order --> start at k = 9 (# of rounds - 1) and decrement
            InvShiftRows(state); // inverse ShiftRows
            InvSubBytes(state);  // inverse SubBytes

            int[] expandedKeyResize = new int[16];
            int expandedKeyResizeCounter = 0;
            for(int i = 16*(k); i < (16*(k)) + 16; i++) { //Works backward through key expansions (same as encrypt func.)
                expandedKeyResize[expandedKeyResizeCounter] = expandedKey[i];
                expandedKeyResizeCounter++;
            }

            AddRoundKey(state,expandedKeyResize); //XOR (addition mod 2) kth key expansion and state
            InvMixColumns(state); // inverse MixColumns
        }

        //Final Round
        InvShiftRows(state); // inverse ShiftRows
        InvSubBytes(state); // inverse SubBytes
        AddRoundKeyInitial(state,key); //XOR original key and state -- reverts state to original plaintext

        String plaintext = "";

        for(int r = 0; r < 4; r++) {
            for(int c = 0; c < 4; c++) {
                char test = (char) state[c][r]; //convert state decimals to char
                plaintext+=test; //add state characters to plaintext
            }
        }
        return plaintext;
    }

    public static void InvShiftRows(int[][] state) {
        int[][] temp = new int[4][4];
        for(int r = 0; r < 4; r++) {  //copies state 2-d array into temp
            for (int c =0; c < 4; c++) {
                temp[r][c] = state[r][c];
            }
        }
        //Row 2 shifts 1 unit rightwards
        state[1][0] = temp[1][3];
        state[1][1] = temp[1][0];
        state[1][2] = temp[1][1];
        state[1][3] = temp[1][2];
        //Row 2 shifts 2 units rightwards
        state[2][0] = temp[2][2];
        state[2][1] = temp[2][3];
        state[2][2] = temp[2][0];
        state[2][3] = temp[2][1];
        //Row 3 shifts 3 units rightwards
        state[3][0] = temp[3][1];
        state[3][1] = temp[3][2];
        state[3][2]  = temp[3][3];
        state[3][3] = temp[3][0];
    }

    public static void InvSubBytes(int[][] state) {
        int rowInt = 0;
        int columnInt = 0;
        String rowTemp;
        String columnTemp;
        for (int row = 0; row < 4; row++) {         //i.e if state[0][0] = 53, then state[0][0] = sbox[5][3]
            for (int column = 0; column < 4; column++) {  //Nested for-loop to traverse 2-d array
                int temp = state[row][column]; //temp = int value bit
                if (temp <= 15) { //checks if the bit is 1 hex digit (i.e. <= 15)
                    columnInt = temp; //if only 1 hex digit -> it represents the column, while row = 0 --> i.e. 01 = sbox[0][1]
                    state[row][column] = sboxInv[0][columnInt]; //sub with proper sboxInv hex value (automatically converts to int, but will convert state/key to hex at end)
                } else {  // > 1 hex digit
                    String hex = Integer.toHexString(temp); //convert bit to hex
                    rowTemp = hex.substring(0, 1); //row value = 1st digit
                    columnTemp = hex.substring(hex.length() - 1); //column value = 2nd digit
                    rowInt = Integer.parseInt(rowTemp, 16); //convert to int to find sboxInv row
                    columnInt = Integer.parseInt(columnTemp, 16); //convert to int to find sboxInv column
                    state[row][column] = sboxInv[rowInt][columnInt]; //substitute using sboxInv
                }
            }
        }
    }

    public static void InvMixColumns(int[][]state) {
        int[][] temp = new int[4][4];
        int[][] mul9Array = new int[4][4]; //parallel array of mc9 table values for each element of state array
        int[][] mul11Array = new int[4][4]; //parallel array of mc11 table values for each element of state array
        int[][] mul13Array = new int[4][4]; //parallel array of mc13 table values for each element of state array
        int[][] mul14Array = new int[4][4]; //parallel array of mc14 table values for each element of state array
        int columnInt = 0;
        String rowTemp, columnTemp; //row & column temp are for dividing hex values for mc table indices
        int rowInt = 0;

//**********FILL MUL9ARRAY FOR LATER REFERENCE**********
        for (int row = 0; row < 4; row++) {
            for (int column = 0; column < 4; column++) {  //Nested for-loop to traverse 2-d array
                int decimal = state[row][column]; //decimal = int value of bit
                if (decimal <= 15) { //checks if the bit is 1 hex digit (i.e. <= 15)
                    columnInt = decimal; //if only 1 hex digit -> it represents the column, while row = 0 --> i.e. 01 = mc#[0][1]
                    mul9Array[row][column] = mc9[0][columnInt]; //sub with proper mc# hex value
                } else {  // > 1 hex digit
                    String hex = Integer.toHexString(decimal); //convert bit to hex
                    rowTemp = hex.substring(0, 1); //row value = 1st digit
                    columnTemp = hex.substring(hex.length() - 1); //column value = 2nd digit
                    rowInt = Integer.parseInt(rowTemp, 16); //convert to int to find mc# row
                    columnInt = Integer.parseInt(columnTemp, 16); //convert to int to find mc# column
                    mul9Array[row][column] = mc9[rowInt][columnInt]; //substitute using mc#
                }
            }
        }
//**********FILL MUL11ARRAY FOR LATER REFERENCE**********
        for (int row = 0; row < 4; row++) {         //SAME PROCESS AS ABOVE
            for (int column = 0; column < 4; column++) {
                int decimal = state[row][column];
                if (decimal <= 15) {
                    columnInt = decimal;
                    mul11Array[row][column] = mc11[0][columnInt];
                } else {  // > 1 hex digit
                    String hex = Integer.toHexString(decimal); //convert bit to hex
                    rowTemp = hex.substring(0, 1); //row value = 1st digit
                    columnTemp = hex.substring(hex.length() - 1); //column value = 2nd digit
                    rowInt = Integer.parseInt(rowTemp, 16);
                    columnInt = Integer.parseInt(columnTemp, 16);
                    mul11Array[row][column] = mc11[rowInt][columnInt];
                }
            }
        }
//**********FILL MUL13ARRAY FOR LATER REFERENCE**********
        for (int row = 0; row < 4; row++) {         //SAME PROCESS AS ABOVE
            for (int column = 0; column < 4; column++) {
                int decimal = state[row][column];
                if (decimal <= 15) {
                    columnInt = decimal;
                    mul13Array[row][column] = mc13[0][columnInt];
                } else {  // > 1 hex digit
                    String hex = Integer.toHexString(decimal); //convert bit to hex
                    rowTemp = hex.substring(0, 1); //row value = 1st digit
                    columnTemp = hex.substring(hex.length() - 1); //column value = 2nd digit
                    rowInt = Integer.parseInt(rowTemp, 16);
                    columnInt = Integer.parseInt(columnTemp, 16);
                    mul13Array[row][column] = mc13[rowInt][columnInt];
                }
            }
        }
//**********FILL MUL14ARRAY FOR LATER REFERENCE**********
        for (int row = 0; row < 4; row++) {         //SAME PROCESS AS ABOVE
            for (int column = 0; column < 4; column++) {
                int decimal = state[row][column];
                if (decimal <= 15) {
                    columnInt = decimal;
                    mul14Array[row][column] = mc14[0][columnInt];
                } else {  // > 1 hex digit
                    String hex = Integer.toHexString(decimal); //convert bit to hex
                    rowTemp = hex.substring(0, 1); //row value = 1st digit
                    columnTemp = hex.substring(hex.length() - 1); //column value = 2nd digit
                    rowInt = Integer.parseInt(rowTemp, 16);
                    columnInt = Integer.parseInt(columnTemp, 16);
                    mul14Array[row][column] = mc14[rowInt][columnInt];
                }
            }
        }
//ACTUAL MIXCOLUMNS CALCULATIONS
        for (int column = 0; column < 4; column++) {
            for (int row = 0; row < 4; row++) {
                //Mixes columns based on pre-determined Galois Field calculations using mc tables and XOR
                if (row == 0) { //Galois {0e,0b,0d,09}
                    temp[row][column] = mul14Array[row][column] ^ mul11Array[1][column] ^ mul13Array[2][column] ^ mul9Array[3][column];
                } else if (row == 1) { //Galois {09,0e,0b,0d}
                    temp[row][column] = mul9Array[0][column] ^ mul14Array[1][column] ^ mul11Array[2][column] ^ mul13Array[3][column];
                } else if (row == 2) { //Galois {0d,09,0e,0b}
                    temp[row][column] = mul13Array[0][column] ^ mul9Array[1][column] ^ mul14Array[2][column] ^ mul11Array[3][column];
                } else { //Galois {0b,0d,09,0e}
                    temp[row][column] = mul11Array[0][column] ^ mul13Array[1][column] ^ mul9Array[2][column] ^ mul14Array[3][column];
                }
            }
        }
        //copies temp array to state array
        for (int r = 0; r < 4; r++) {
            for (int c = 0; c < 4; c++) {
                state[r][c] = temp[r][c];
            }
        }
    }
}